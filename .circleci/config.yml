version: 2.1

orbs:
  aws-cli: circleci/aws-cli@1.2.1
  aws-ecr: circleci/aws-ecr@6.9.1
  aws-ecs: circleci/aws-ecs@1.2.0

commands:
  restore_build_cache:
    steps:
      - restore_cache:
          keys:
            - docker-cache-{{ checksum "nginx/Dockerfile" }}-{{ checksum "src/composer.lock" }}-{{ checksum "src/package.json" }}
          paths:
            - ~/caches/images.tar
      - run:
          command: |
            if [[ -e ~/caches/images.tar ]]; then
              docker load -i ~/caches/images.tar
            fi
          name: docker load
      - restore_cache:
          keys:
            - composer-{{ checksum "src/composer.lock" }}
          name: composer restore cache
      - restore_cache:
          keys:
            - assets-{{ checksum "src/package-lock.json" }}
          name: assets restore cache

jobs:
  build-laravel:
    machine: true
    steps:
      - checkout
      - restore_cache:
          keys:
            - docker-cache-{{ checksum "nginx/Dockerfile" }}
          paths:
            - ~/caches/images.tar
          name: docker restore cache
      - run:
          command: |
            if [[ -e ~/caches/images.tar ]]; then
              docker load -i ~/caches/images.tar
            fi
          name: docker load
      - run:
          command: docker-compose up -d --build
          name: docker up
      - run:
          command: mkdir -p ~/caches
          name: mkdir -p ~/caches
      - run:
          command: |
            if [[ ! -e ~/caches/images.tar ]]; then
              docker save -o ~/caches/images.tar $(docker images --filter "dangling=false" --format "{{.Repository}}:{{.Tag}}")
            fi
          name: docker save
      - save_cache:
          key: docker-cache-{{ checksum "nginx/Dockerfile" }}
          paths:
            - ~/caches/images.tar
          name: docker save cache
      - restore_cache:
          keys:
            - composer-{{ checksum "src/composer.lock" }}
          name: composer restore cache
      - run:
          command: docker-compose run laravel composer install
          name: composer install
      - save_cache:
          key: composer-{{ checksum "src/composer.lock" }}
          paths:
            - src/vendor
          name: composer save cache

  build-assets:
    docker:
      - image: circleci/node:lts
    steps:
      - checkout
      - run:
          command: npm --prefix src install
          name: node_modules install
      - run:
          command: npm --prefix src run production
          name: build node_modules
      - save_cache:
          key: assets-{{ checksum "src/package-lock.json" }}
          paths:
            - src/public
          name: assets save cache

  building-test:
    machine: true
    steps:
      - checkout
      - restore_build_cache
      - run:
          command: |
            docker-compose run laravel cp ./.env.example ./.env
            docker-compose run laravel php artisan migrate --seed
            docker-compose run laravel php artisan config:cache
            docker-compose run laravel php artisan view:cache
            docker-compose run laravel php artisan event:cache
            docker-compose run laravel php artisan optimize
          name: build with cache
      - run:
          command: docker-compose run laravel php artisan migrate --seed
          name: test seeder reentrant
      - run:
          command: docker-compose run laravel composer install --no-dev
          name: test prod install

  phpunit:
    machine: true
    steps:
      - checkout
      - restore_build_cache
      - run:
          command: docker-compose run laravel cp ./.env.example ./.env
          name: create env file
      - run:
          command: docker-compose run laravel php artisan key:generate
          name: generate key
      - run: 
          command: docker-compose run laravel vendor/bin/phpunit
          name: phpunit
  
  phpmd:
    machine: true
    steps:
      - checkout
      - restore_build_cache
      - run: 
          command: docker-compose run laravel composer check-phpmd
          name: phpmd

  deploy-image:
    machine: true
    steps:
      - checkout
      - restore_cache:
          keys:
            - assets-{{ checksum "src/package-lock.json" }}
          name: assets restore cache
      - run:
          command: |
            docker build -tgym-app-base -fphp-fpm/base.dockerfile .
            docker build -tborderless-gym/app -fphp-fpm/prod.dockerfile .
            docker build -tborderless-gym/nginx -fnginx/Dockerfile .
          name: build iamges
      - run:
          command: |
            APP_ECR_URL="${AWS_ECR_ACCOUNT_URL}/borderless-gym"
            docker tag borderless-gym/app:latest "${APP_ECR_URL}/app:${CIRCLE_SHA1}"
            docker tag borderless-gym/nginx:latest "${APP_ECR_URL}/nginx:${CIRCLE_SHA1}"
          name: set image tag
      - aws-cli/install
      - aws-cli/setup
      - aws-ecr/ecr-login
      - aws-ecr/push-image:
          repo: "borderless-gym/app"
          tag: "${CIRCLE_SHA1}"
      - aws-ecr/push-image:
          repo: "borderless-gym/nginx"
          tag: "${CIRCLE_SHA1}"

workflows:
  version: 2
  build-and-test:
    jobs:
      - build-laravel
      - build-assets
      - phpunit:
          requires:
            - build-laravel
            - build-assets
      - phpmd:
          requires:
            - build-laravel
            - build-assets
      - building-test:
          requires:
            - build-laravel
            - build-assets
      - deploy-image:
          context: aws-eggsystem
          requires:
            - phpmd
            - phpunit
            - building-test
          filters:
            branches:
              only: master
      - aws-ecs/deploy-service-update:
          context: aws-eggsystem
          requires:
            - deploy-image
          filters:
              branches:
                only: master
          family: "borderless-gym-app-stage"
          cluster-name: "borderless-gym-app-group"
          service-name: "borderless-gym-app-stage"
          container-image-name-updates: "container=stage-gym-app,tag=${CIRCLE_SHA1},container=stage-gym-nginx,tag=${CIRCLE_SHA1}"
  
